// Package civetAdminCenter comment
// This file was generated by tars2go 1.1.4
// Generated from Verify.tars
package civetAdminCenter

import (
	"fmt"

	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8

type E_VERIFY_CODE int32

const (
	E_VERIFY_CODE_EVC_TOKEN_EXPIRE = -3
	E_VERIFY_CODE_EVC_ERR_TOKEN    = -2
	E_VERIFY_CODE_EVC_SYS_ERR      = -1
	E_VERIFY_CODE_EVC_SUCC         = 0
)

// VeifyReq struct implement
type VeifyReq struct {
	Token         string            `json:"token"`
	VerifyHeaders map[string]string `json:"verifyHeaders"`
	Body          []int8            `json:"body"`
}

func (st *VeifyReq) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *VeifyReq) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_string(&st.Token, 0, true)
	if err != nil {
		return err
	}

	err, have = _is.SkipTo(codec.MAP, 1, false)
	if err != nil {
		return err
	}

	if have {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}

		st.VerifyHeaders = make(map[string]string)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {
			var k0 string
			var v0 string

			err = _is.Read_string(&k0, 0, false)
			if err != nil {
				return err
			}

			err = _is.Read_string(&v0, 1, false)
			if err != nil {
				return err
			}

			st.VerifyHeaders[k0] = v0
		}
	}

	err, have, ty = _is.SkipToNoCheck(2, false)
	if err != nil {
		return err
	}

	if have {
		if ty == codec.LIST {
			err = _is.Read_int32(&length, 0, true)
			if err != nil {
				return err
			}

			st.Body = make([]int8, length)
			for i1, e1 := int32(0), length; i1 < e1; i1++ {

				err = _is.Read_int8(&st.Body[i1], 0, false)
				if err != nil {
					return err
				}

			}
		} else if ty == codec.SIMPLE_LIST {

			err, _ = _is.SkipTo(codec.BYTE, 0, true)
			if err != nil {
				return err
			}

			err = _is.Read_int32(&length, 0, true)
			if err != nil {
				return err
			}

			err = _is.Read_slice_int8(&st.Body, length, true)
			if err != nil {
				return err
			}

		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}

		}
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *VeifyReq) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require VeifyReq, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *VeifyReq) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_string(st.Token, 0)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.MAP, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.VerifyHeaders)), 0)
	if err != nil {
		return err
	}

	for k2, v2 := range st.VerifyHeaders {

		err = _os.Write_string(k2, 0)
		if err != nil {
			return err
		}

		err = _os.Write_string(v2, 1)
		if err != nil {
			return err
		}

	}

	err = _os.WriteHead(codec.SIMPLE_LIST, 2)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.BYTE, 0)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.Body)), 0)
	if err != nil {
		return err
	}

	err = _os.Write_slice_int8(st.Body)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *VeifyReq) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// VeifyRsp struct implement
type VeifyRsp struct {
	Ret     int32  `json:"ret"`
	Uid     string `json:"uid"`
	Context string `json:"context"`
}

func (st *VeifyRsp) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *VeifyRsp) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_int32(&st.Ret, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Uid, 1, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Context, 2, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *VeifyRsp) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require VeifyRsp, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *VeifyRsp) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_int32(st.Ret, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Uid, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Context, 2)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *VeifyRsp) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}
