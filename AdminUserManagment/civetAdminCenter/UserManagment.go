// Package civetAdminCenter comment
// This file was generated by tars2go 1.1.4
// Generated from UserManagment.tars
package civetAdminCenter

import (
	"fmt"

	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8

// AdminBasicInfo struct implement
type AdminBasicInfo struct {
	Id         int32  `json:"id"`
	Username   string `json:"username"`
	Name       string `json:"name"`
	Password   string `json:"password"`
	Number     string `json:"number"`
	Email      string `json:"email"`
	Sex        string `json:"sex"`
	Enable     string `json:"enable"`
	Role       int32  `json:"role"`
	CreateTime int64  `json:"createTime"`
	UpdateTime int64  `json:"UpdateTime"`
}

func (st *AdminBasicInfo) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *AdminBasicInfo) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_int32(&st.Id, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Username, 1, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Name, 2, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Password, 3, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Number, 4, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Email, 5, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Sex, 6, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Enable, 7, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.Role, 8, false)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.CreateTime, 9, false)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.UpdateTime, 10, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *AdminBasicInfo) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require AdminBasicInfo, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *AdminBasicInfo) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_int32(st.Id, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Username, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Name, 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Password, 3)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Number, 4)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Email, 5)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Sex, 6)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Enable, 7)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.Role, 8)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.CreateTime, 9)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.UpdateTime, 10)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *AdminBasicInfo) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}
